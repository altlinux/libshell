#!/bin/sh -efu

if [ -z "${__included_shell_array-}" ]; then
__included_shell_array=1

if [ -n "${__libshell_experimental-}" ]; then

. ../shell-error

# Function return array size.
# Usage: array_size ARR arrsize; echo "$arrsize"
array_size() {
	eval "set -- \$$1"
	eval "$2=$#"
}

# Get array element and store result into variable.
# Usage: array_get ARR $index var
array_get() {
	if [ "$#" -ne 3 ]; then
		message "array_get: More arguments required"
		return 1
	fi
	local __array_get_arr="$1" __array_get_index="$2" __array_get_var="$3"

	eval "set -- \$$__array_get_arr"
	local __array_get_size=$#

	if [ "$__array_get_index" = 'first' ]; then
		__array_get_index=0
	elif [ "$__array_get_index" = 'last' ]; then
		__array_get_index=$(($__array_get_size-1))
	else
		if [ "$__array_get_index" -lt 0 -o "$__array_get_index" -ge "$__array_get_size" ]; then
			message "index '$__array_get_index' out of range"
			return 1
		fi
	fi
	shift $__array_get_index
	eval "$__array_get_var=\"\${__ARRAY_${__array_get_arr}_$1-}\""
}

# Usage: array_first ARR var; echo "$var"
array_first() {
	array_get "$1" 'first' "$2"
}

# Usage: array_last ARR var; echo "$var"
array_last() {
	array_get "$1" 'last' "$2"
}

# Usage: array_remove ARR index [old_result]
array_remove() {
	if [ "$#" -lt 2 ]; then
		message "array_remove: More arguments required"
		return 1
	fi

	local __array_remove_arr="$1" __array_remove_index="$2" __array_remove_var="${3-}"

	eval "set -- \$$__array_remove_arr"
	local __array_remove_size=$#

	if [ "$__array_remove_index" = 'first' ]; then
		__array_remove_index=0
	elif [ "$__array_remove_index" = 'last' ]; then
		__array_remove_index=$(($__array_remove_size-1))
	else
		if [ "$__array_remove_index" -lt 0 -o "$__array_remove_index" -ge "$__array_remove_size" ]; then
			message "index '$__array_remove_index' out of range"
			return 1
		fi
	fi

	local __array_remove_out=
	while [ $__array_remove_index -gt 0 ]; do
		__array_remove_out="$__array_remove_out $1"
		__array_remove_index=$(($__array_remove_index-1))
		shift
	done

	eval "[ -z \"$__array_remove_var\" ] ||
			$__array_remove_var=\"\$__ARRAY_${__array_remove_arr}_$1\";
		unset __ARRAY_${__array_remove_arr}_$1"
	shift

	__array_remove_out="$__array_remove_out${1:+ $*} "
	eval "$__array_remove_arr=\"\$__array_remove_out\""
}

# Shift an element off the beginning of array.
# Usage: array_shift ARR [old_result]
array_shift() {
	array_remove "$1" 'first' "${2-}"
}

# Pop the element off the end of array.
# Usage: array_pop ARR [old_result]
array_pop() {
	array_remove "$1" 'last' "${2-}"
}

# Usage: array_insert ARR index 'new-value'
array_insert() {
	if [ "$#" -ne 3 ]; then
		message "array_insert: More arguments required"
		return 1
	fi

	local __array_insert_arr="$1" __array_insert_index="$2" __array_insert_value="$3"

	eval "set -- \$$__array_insert_arr"
	local __array_insert_size=$#

	if [ "$__array_insert_index" = 'first' ]; then
		__array_insert_index=0
	elif [ "$__array_insert_index" = 'last' ]; then
		__array_insert_index=$__array_insert_size
	else
		if [ "$__array_insert_index" -lt 0 -o "$__array_insert_index" -ge "$__array_insert_size" ]; then
			message "index '$__array_insert_index' out of range"
			return 1
		fi
		__array_insert_index=$(($__array_insert_index+1))
	fi

	local __array_insert_arg  __array_insert_out= __array_insert_max=0
	while [ $__array_insert_index -gt 0 ]; do
		[ "$__array_insert_max" -gt "$1" ] ||
			__array_insert_max="$1"
		__array_insert_out="$__array_insert_out $1"
		__array_insert_index=$(($__array_insert_index-1))
		shift
	done

	for __array_insert_arg; do
		[ "$__array_insert_max" -gt "$__array_insert_arg" ] ||
			max="$__array_insert_arg"
	done
	__array_insert_max=$(($__array_insert_max+1))

	eval "__ARRAY_${__array_insert_arr}_$__array_insert_max=\"\$__array_insert_value\";
	      $__array_insert_arr=\"$__array_insert_out $__array_insert_max ${1:+$* }\""
}

# Push one or more elements onto the end of array.
# Usage: array_push ARR 'value1' 'value2' 'value3'
array_push() {
	if [ "$#" -lt 2 ]; then
		message "array_push: More arguments required"
		return 1
	fi
	local __array_push_arg __array_push_arr="$1"
	shift

	for __array_push_arg; do
		array_insert "$__array_push_arr" 'last' "$__array_push_arg"
	done
}

# Prepend one or more elements to the beginning of an array
# Usage: array_unshift ARR 'value1' 'value2' 'value3'
array_unshift() {
	array_insert "$1" 'first' "${2-}"
}

# Create shell array
# Usage: array_create ARR 'value1' 'value2' 'value3'
array_create() {
	if [ "$#" -lt 1 ]; then
		message "array_create: More arguments required"
		return 1
	fi
	local __array_create_arr="$1"
	shift

	eval "$__array_create_arr=''"
	[ -z "${1-}" ] ||
		array_push "$__array_create_arr" "$@"
}

# Destroy shell array
# Usage: array_destroy ARR
array_destroy() {
	if [ "$#" -eq 0 ]; then
		message "array_destroy: More arguments required"
		return 1
	fi
	local __array_destroy_arg __array_destroy_arr="$1"
	shift

	for __array_destroy_arg in $__array_destroy_arr; do
		eval "unset __ARRAY_${__array_destroy_arr}_$__array_destroy_arg"
	done
	eval "unset $__array_destroy_arr"
}

# Array iterator
# Usage: while array_foreach ARR var; do echo "$var"; done
ARRAY_FOREACH_NUM=0
array_foreach() {
	if [ "$#" -lt 2 ]; then
		message "array_foreach: More arguments required"
		return 1
	fi

	local __array_foreach_arr="$1" __array_foreach_val="$2"
	eval "set -- \$$__array_foreach_arr"

	ARRAY_FOREACH_NUM=$(($ARRAY_FOREACH_NUM+1))
	if [ "$ARRAY_FOREACH_NUM" -gt $# ]; then
		ARRAY_FOREACH_NUM=0
		return 1
	fi

	eval "$__array_foreach_val=\"\$__ARRAY_${__array_foreach_arr}_$ARRAY_FOREACH_NUM\""
}

# Usage: array_flip ARR $src_i $dst_i
array_flip() {
	if [ "$#" -lt 3 ]; then
		message "array_flip: More arguments required"
		return 1
	fi
	local arg
	local arr="$1" src="$2" dst="$3"

	eval "set -- \$$arr"
	local size=$#

	for arg in "$src" "$dst"; do
		if [ "$arg" -lt 0 -o "$arg" -ge "$size" ]; then
			message "index '$arg' out of range"
			return 1
		fi
	done

	src=$(($src+1))
	dst=$(($dst+1))

	eval "src=\"\$$src\"; dst=\"\$$dst\";
	      arg=\"\$__ARRAY_${arr}_$src\";
	      __ARRAY_${arr}_$src=\"\$__ARRAY_${arr}_$dst\";
	      __ARRAY_${arr}_$dst=\"\$arg\";"
}

fi #__libshell_experimental

fi #__included_shell_array
